import _file_.DundiModelODD._
// laisser tourner 250 heures
val evolution = PSEEvolution(
  evaluation = dundiModelODDTask,
  parallelism = 100,
  termination = 100000,
  genome = Seq(
      goodShepherdPercentage in (0.0, 100.0),
      proportionBigHerders in (0.0, 49.0),
      proportionMediumHerders in (0.0, 49.0),
      interfaceNumberOfCampI in (1.0, 130.0),
  ),
 
  objective = Seq(
    MSTSheepNEC aggregate "MSTSheepNEC.percentile(25)" in(0.0 to 1.0 by 0.1), //Attention on veux dans la cadre de la viabilité que les résultats soit sur a 95%  --> seq(5)
    MSTCattleNEC aggregate "MSTCattleNEC.percentile(25)" in(0.0 to 1.0 by 0.1),
    MSTTrees aggregate "MSTTrees.percentile(25)" in(0.0 to 1.0 by 0.1),
    ),
  // distribution = Island(10 minutes), // doit durée plus que le temps de calcul
  stochastic = Stochastic(seed = mySeed, sample = 30)
) hook (workDirectory / "M0_results_pse_muse", frequency = 10)
// dans le fichier "results_pse_mil_bois_obj1" on a mis les résultats de --> percentile(om_stockMil, Seq(5)).head" in(0.0 to 100000.0 by 1000.0) --> c'est bien les sembles du dernier quartile qui sont conservé
// dans le fichier "results_pse_mil_bois_obj2" on a mis les résultats de --> percentile(om_stockMil, Seq(95)).head" in(0.0 to 100000.0 by 1000.0)

val grid = EGIEnvironment("vo.complex-systems.eu", storage = Seq("https://eos.grif.fr:11000/eos/grif/complex/"))

val muse = SLURMEnvironment(
    "delaye",
    "muse-login.hpc-lr.univ-montp2.fr",
    // optional parameters
    partition = "agap_normal", // can be agap_short (1h) agap_normal(48h) agap_long(no limit)
    workDirectory = "/lustre/delaye/openmole",
    //workDirectory = "/home/delaye/scratch/openmole",
    sharedDirectory = "/storage/replicated/cirad_users/delaye/openmole",
    time = 10 hours
  )

val local = LocalEnvironment(1)
evolution on muse