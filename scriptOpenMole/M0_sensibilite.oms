import _file_.DundiModel._
import _file_.environement_explo._

val replications = Replication(
    evaluation = model, // the model to run
    seed = mySeed,         // the seed variable
    sample = 20,           // the number of model executions
    aggregation = Seq(meanCattlesNEC aggregate median, MSTCattleNEC aggregate median,
                      totalTreesOldes aggregate median, meanGrass aggregate median, 
                      treesKilled aggregate average, cattlesTempCamp aggregate average)
)

// it's replication how is evaluated in the model
val sensitivAnalyse = SensitivitySaltelli(
      evaluation = model,
      inputs = Seq(
          numberofCamps in (1.0, 80.0),
          goodShepherdPercentage in (0.0, 100.0),
          proportionBigHerders in (30.0, 70.0), // ATTENTION CA NE PEUT PAS ALLER AU DELA DE 50%
          proportionMediumHerders in (0.0,30.0), // ATTENTION CA NE PEUT PAS ALLER AU DELA DE 50%
          avgUBTpercamp in (10.0, 70.0),
          decreasingFactor in (0.5, 8.0)
        ),
      outputs = Seq(treesKilled, cattlesTempCamp, sheepsTempCamp, meanGrass, meanCattlesNEC, MSTCattleNEC, meanSheepsNEC, MSTSheepNEC, totalTreesOldes),
      sample = 30 // 7 parametres x 10 chemins le nombre de trajectoir est r de k+1  campolongo et al. 2007, An effective screening design for sensitivity analysis of large models
      //level = 10
    ) hook (workDirectory / "MO_results_saltelli")


val dispatch =
  DispatchEnvironment(
    slot = Seq(
      300 on muse
    )
  )


//val local = LocalEnvironment(1)


sensitivAnalyse on dispatch