
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Initialisation des arbres ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to setup-trees ; Valeurs d'initialisation (âge minimum des arbres découverts)
  ask patches [
    ; Liste des types d'arbres à traiter
    ; Si le nombre d'arbres est supérieur à 0, procéder à l'initialisation
    if num-nutritious > 0 [
      let input-tree-type "nutritive"
      let soil-types [soil-type] of self
      ; Répartir la population en groupes d'âge
      let age-distribution split-population num-nutritious
      let num-ages length age-distribution
      let indices range length age-distribution

      ; Boucle sur les âges
      foreach indices [ [i]->
        let pop-size item i age-distribution

        let tree-age ifelse-value (i < 7) [i + 1] [8]
        ; Obtenir les données pour ce type d'arbre et cet âge
        let age-data get-age-data soil-types input-tree-type tree-age
        let germination-rates get-germination-data soil-types input-tree-type
        let nutritional-values get-tree-nutritional-data input-tree-type soil-types current-season
      ;  show age-data
      ;  show germination-rates
     ;   show nutritional-values
        if age-data != [] [
          ; Extraire les valeurs de stocks et de sensibilité
          let max-leaf item 0 age-data
          let max-fruit item 1 age-data
          let max-wood item 2 age-data
          let accessible item 3 age-data
          let max-fruits-nb item 4 age-data
          
          ; Stocker les valeurs dans les variables de patch
          set intermediate-patch-pop-size pop-size
          set intermediate-patch-tree-age tree-age
          set intermediate-patch-tree-type input-tree-type
          set init-patch-max-fruit-stock max-fruit * pop-size
          set init-patch-max-leaf-stock max-leaf * pop-size
          set init-patch-max-wood-stock max-wood * pop-size
          set init-patch-accessible accessible
          set init-patch-fruits-nb max-fruits-nb * pop-size

          ; Créer une population d'arbres sur le patch
          sprout-tree-populations 1 [
            set tree-type intermediate-patch-tree-type
            set tree-pop-age intermediate-patch-tree-age
            set population-size intermediate-patch-pop-size

            ifelse population-size != 0 [
              ; Initialiser les stocks actuels
              set max-fruit-stock init-patch-max-fruit-stock / 1000
              set max-leaf-stock init-patch-max-leaf-stock / 1000
              set max-wood-stock init-patch-max-wood-stock / 1000
              set leaves-percent-accessible init-patch-accessible
              set fruits-percent-accessible init-patch-accessible
              set max-fruit-nb init-patch-fruits-nb
              
              set germination-rate item 0 germination-rates
              set young-regen-rate item 1 germination-rates
              set dormance-needed item 2 germination-rates
              set one-fruit-weight item 3 germination-rates / 1000
              set seed-nb-per-fruit item 4 germination-rates
              set one-seed-weight item 5 germination-rates / 1000
              set ratio-consumable item 6 germination-rates
              
              set leaves-status item 0 nutritional-values
              set leaves-UF-per-kg-MS item 1 nutritional-values
              set leaves-MAD-per-kg-MS item 2 nutritional-values
              set fruits-status item 3 nutritional-values
              set fruits-UF-per-kg-MS item 4 nutritional-values
              set fruits-MAD-per-kg-MS item 5 nutritional-values
              
              set current-fruit-stock (max-fruit-stock / 2)
              set current-leaf-stock (max-leaf-stock / 2)
              set current-wood-stock max-wood-stock
              set soil-current-fruit-stock 0
              set fruit-nb min (list (current-fruit-stock / one-fruit-weight) max-fruit-nb)
              set seed-nb fruit-nb * seed-nb-per-fruit
              
              hide-turtle
            ] [
              die
            ]
          ]
        ]
      ]
    ]
  
  
  if num-less-nutritious > 0 [
      ; Répartir la population en groupes d'âge*
      let input-tree-type "lessNutritive"
      let age-distribution split-population num-less-nutritious
      let soil-types [soil-type] of self
      let num-ages length age-distribution
      let indices range length age-distribution
      ; Boucle sur les âges
      foreach indices [ [i]->
        let pop-size item i age-distribution
        let tree-age ifelse-value (i < 7) [i + 1] [8]
        ; Obtenir les données pour ce type d'arbre et cet âge
        let age-data get-age-data soil-types input-tree-type tree-age
        let germination-rates get-germination-data soil-types input-tree-type
        let nutritional-values get-tree-nutritional-data input-tree-type soil-types current-season
        ; Vérifier si les données pour cet âge existent
        if age-data != [] [
          let max-leaf item 0 age-data
          let max-fruit item 1 age-data
          let max-wood item 2 age-data
          let accessible item 3 age-data
          let max-fruits-nb item 4 age-data
          
          ; Stocker les valeurs dans les variables de patch
          set intermediate-patch-pop-size pop-size
          set intermediate-patch-tree-age tree-age
          set intermediate-patch-tree-type input-tree-type
          set init-patch-max-fruit-stock max-fruit * pop-size
          set init-patch-max-leaf-stock max-leaf * pop-size
          set init-patch-max-wood-stock max-wood * pop-size
          set init-patch-accessible accessible
          set init-patch-fruits-nb max-fruits-nb * pop-size

          
          ; Créer une population d'arbres sur le patch
          sprout-tree-populations 1 [
            set tree-type intermediate-patch-tree-type
            set tree-pop-age intermediate-patch-tree-age
            set population-size intermediate-patch-pop-size
            
          
            ifelse population-size != 0 [
              
              set max-fruit-stock init-patch-max-fruit-stock
              set max-leaf-stock init-patch-max-leaf-stock
              set max-wood-stock init-patch-max-wood-stock
              set leaves-percent-accessible init-patch-accessible
              set fruits-percent-accessible init-patch-accessible
              set max-fruit-nb init-patch-fruits-nb
              
              set germination-rate item 0 germination-rates
              set young-regen-rate item 1 germination-rates
              set dormance-needed item 2 germination-rates
              set one-fruit-weight item 3 germination-rates / 1000
              set seed-nb-per-fruit item 4 germination-rates
              set one-seed-weight item 5 germination-rates / 1000
              set ratio-consumable item 6 germination-rates
              
              set leaves-status item 0 nutritional-values
              set leaves-UF-per-kg-MS item 1 nutritional-values
              set leaves-MAD-per-kg-MS item 2 nutritional-values
              set fruits-status item 3 nutritional-values
              set fruits-UF-per-kg-MS item 4 nutritional-values
              set fruits-MAD-per-kg-MS item 5 nutritional-values
              
              set current-fruit-stock (max-fruit-stock / 2)
              set current-leaf-stock (max-leaf-stock / 2)
              set current-wood-stock max-wood-stock
              set soil-current-fruit-stock 0
              set fruit-nb min (list (current-fruit-stock / one-fruit-weight) max-fruit-nb)
              set seed-nb fruit-nb * seed-nb-per-fruit
              
              hide-turtle
            ] [
              die
            ]
          ]
        ]
      ]
    ]
    
    
    if num-fruity > 0 [
      let input-tree-type "fruity"
      let soil-types [soil-type] of self
      ; Répartir la population en groupes d'âge
      let age-distribution split-population num-fruity
      let num-ages length age-distribution
      let indices range length age-distribution
      ; Boucle sur les âges
      foreach indices [ [i]->
        let pop-size item i age-distribution
        let tree-age ifelse-value (i < 7) [i + 1] [8]
        
        ; Obtenir les données pour ce type d'arbre et cet âge
        let age-data get-age-data soil-types input-tree-type tree-age
        let germination-rates get-germination-data soil-types input-tree-type
        let nutritional-values get-tree-nutritional-data input-tree-type soil-types current-season
        
        ; Vérifier si les données pour cet âge existent
        if age-data != [] [
          ; Extraire les valeurs de stocks et de sensibilité
          let max-leaf item 0 age-data
          let max-fruit item 1 age-data
          let max-wood item 2 age-data
          let accessible item 3 age-data
          let max-fruits-nb item 4 age-data
          
          ; Stocker les valeurs dans les variables de patch
          set intermediate-patch-pop-size pop-size
          set intermediate-patch-tree-age tree-age
          set intermediate-patch-tree-type input-tree-type
          set init-patch-max-fruit-stock max-fruit * pop-size
          set init-patch-max-leaf-stock max-leaf * pop-size
          set init-patch-max-wood-stock max-wood * pop-size
          set init-patch-accessible accessible
          set init-patch-fruits-nb max-fruits-nb * pop-size
          
          ; Créer une population d'arbres sur le patch
          sprout-tree-populations 1 [
            set tree-type intermediate-patch-tree-type
            set tree-pop-age intermediate-patch-tree-age
            set population-size intermediate-patch-pop-size
            
            ifelse population-size != 0 [
              ; Initialiser les stocks actuels
              set max-fruit-stock init-patch-max-fruit-stock / 1000
              set max-leaf-stock init-patch-max-leaf-stock / 1000
              set max-wood-stock init-patch-max-wood-stock / 1000
              set leaves-percent-accessible init-patch-accessible
              set fruits-percent-accessible init-patch-accessible
              set max-fruit-nb init-patch-fruits-nb
              
              set germination-rate item 0 germination-rates
              set young-regen-rate item 1 germination-rates
              set dormance-needed item 2 germination-rates
              set one-fruit-weight item 3 germination-rates / 1000
              set seed-nb-per-fruit item 4 germination-rates
              set one-seed-weight item 5 germination-rates / 1000
              set ratio-consumable item 6 germination-rates
              
              set leaves-status item 0 nutritional-values
              set leaves-UF-per-kg-MS item 1 nutritional-values
              set leaves-MAD-per-kg-MS item 2 nutritional-values
              set fruits-status item 3 nutritional-values
              set fruits-UF-per-kg-MS item 4 nutritional-values
              set fruits-MAD-per-kg-MS item 5 nutritional-values
              
              set current-fruit-stock (max-fruit-stock / 2)
              set current-leaf-stock (max-leaf-stock / 2)
              set current-wood-stock max-wood-stock
              set soil-current-fruit-stock 0
              set fruit-nb min (list (current-fruit-stock / one-fruit-weight) max-fruit-nb)
              set seed-nb fruit-nb * seed-nb-per-fruit
              
              hide-turtle
            ] [
              die
            ]
          ]
        ]
      ]
    ]
  ]
update-tree-visualisation

end


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Mise à jour annuelle de l'âge des arbres ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to update-tree-age
  ; Si une année s'est écoulée
  let advancing-populations []
  ; 2. Incrémenter l'âge de toutes les populations d'arbres
  ask tree-populations [
    ifelse tree-pop-age < 5 [
      set tree-pop-age tree-pop-age + 1
      set population-size round (population-size * young-regen-rate / 100)
      let soil-types [soil-type] of patch-here
      ; Mettre à jour les stocks maximaux pour le nouvel âge
      ifelse population-size > 0 [
        let age-data get-age-data soil-types tree-type tree-pop-age          
        let max-leaf item 0 age-data
        let max-fruit item 1 age-data
        let max-wood item 2 age-data
        let accessible item 3 age-data
        let max-fruits-nb item 4 age-data
       
        set max-wood-stock max-wood * population-size  / 1000
        set max-fruit-stock max-fruit * population-size  / 1000
        set max-leaf-stock max-leaf * population-size  / 1000
        set max-fruit-nb max-fruits-nb * population-size
        set leaves-percent-accessible accessible 
        set fruits-percent-accessible accessible
      ] [
        die
      ]
      
      
      ] [ if tree-pop-age >= 5 and tree-pop-age < 8 [
        set tree-pop-age tree-pop-age + 1
        let soil-types [soil-type] of patch-here
        set population-size round (population-size * 0.95)
        ; Mettre à jour les stocks maximaux pour le nouvel âge       
        ifelse population-size > 0 [
          let age-data get-age-data soil-types tree-type tree-pop-age          
          let max-leaf item 0 age-data
          let max-fruit item 1 age-data
          let max-wood item 2 age-data
          let accessible item 3 age-data
          let max-fruits-nb item 4 age-data
          
          set max-wood-stock max-wood * population-size / 1000
          set max-fruit-stock max-fruit * population-size / 1000
          set max-leaf-stock max-leaf * population-size / 1000
          set max-fruit-nb max-fruits-nb * population-size
          set leaves-percent-accessible accessible
          set fruits-percent-accessible accessible
        ] [
          die
        ]
        if tree-pop-age = 8 and population-size > 0 [
          set advancing-populations lput (list patch-here tree-type population-size current-fruit-stock current-leaf-stock current-wood-stock fruit-nb seed-nb) advancing-populations
          die
        ]
      ]
    ]
  ]
  
  ; Traiter les populations avancées

  foreach advancing-populations [ any-adv-population ->
    let adv-patch item 0 any-adv-population
    let adv-tree-type item 1 any-adv-population
    let adv-pop-size item 2 any-adv-population
    let adv-fruit-stock item 3 any-adv-population
    let adv-leaf-stock item 4 any-adv-population
    let adv-wood-stock item 5 any-adv-population
    let adv-fruit-nb item 6 any-adv-population
    let existing-population one-of tree-populations with [
      patch-here = adv-patch and tree-type = adv-tree-type and tree-pop-age = 8
    ]
    ifelse existing-population != nobody [
      ; Ajouter la taille de la population qui passe à l'âge 8
      ask existing-population [
        set population-size round (population-size * 0.99)
        set population-size population-size + adv-pop-size
        let soil-types [soil-type] of patch-here
        ; Mettre à jour les stocks maximaux
        let age-data get-age-data soil-types tree-type tree-pop-age 
        let max-leaf item 0 age-data
        let max-fruit item 1 age-data
        let max-wood item 2 age-data
        let accessible item 3 age-data
        let max-fruits-nb item 4 age-data
        
        set max-wood-stock max-wood * population-size  / 1000
        set max-fruit-stock max-fruit * population-size / 1000
        set max-leaf-stock max-leaf * population-size / 1000
        set leaves-percent-accessible accessible
        set fruits-percent-accessible accessible
        set max-fruit-nb max-fruits-nb * population-size
        
        set current-fruit-stock min (list (current-fruit-stock + adv-fruit-stock) max-fruit-stock)
        set current-leaf-stock min (list (current-leaf-stock + adv-leaf-stock) max-leaf-stock)
        set current-wood-stock min (list (current-wood-stock + adv-wood-stock) max-wood-stock)
        set soil-current-fruit-stock 0
        set fruit-nb min (list (current-fruit-stock / one-fruit-weight) max-fruit-nb)
        set seed-nb fruit-nb * seed-nb-per-fruit

        
        ; Mettre à jour les stocks actuels si nécessaire
      ]


    ] [
      ; Créer une nouvelle population d'arbres à l'âge 8
      ask adv-patch [
        sprout-tree-populations 1 [
          set tree-type adv-tree-type
          set tree-pop-age 8
          set population-size adv-pop-size
          let soil-types [soil-type] of patch-here
          ; Initialiser les stocks
          let age-data get-age-data soil-types tree-type tree-pop-age 
          let max-leaf item 0 age-data
          let max-fruit item 1 age-data
          let max-wood item 2 age-data
          let accessible item 3 age-data
          let max-fruits-nb item 4 age-data
          
          set max-wood-stock max-wood * population-size  / 1000
          set max-fruit-stock max-fruit * population-size / 1000
          set max-leaf-stock max-leaf * population-size / 1000
          set leaves-percent-accessible accessible
          set fruits-percent-accessible accessible
          set max-fruit-nb max-fruits-nb * population-size

          let germination-rates get-germination-data soil-types tree-type
          set germination-rate item 0 germination-rates
          set young-regen-rate item 1 germination-rates
          set dormance-needed item 2 germination-rates
          set one-fruit-weight item 3 germination-rates / 1000
          set seed-nb-per-fruit item 4 germination-rates
          set one-seed-weight item 5 germination-rates / 1000
          set ratio-consumable item 6 germination-rates
          
          let nutritional-values get-tree-nutritional-data tree-type soil-types current-season
          set leaves-status item 0 nutritional-values
          set leaves-UF-per-kg-MS item 1 nutritional-values
          set leaves-MAD-per-kg-MS item 2 nutritional-values
          set fruits-status item 3 nutritional-values
          set fruits-UF-per-kg-MS item 4 nutritional-values
          set fruits-MAD-per-kg-MS item 5 nutritional-values
          
          set current-fruit-stock min (list adv-fruit-stock max-fruit-stock)
          set current-leaf-stock min (list adv-leaf-stock max-leaf-stock)
          set current-wood-stock min (list adv-wood-stock max-wood-stock)
          set soil-current-fruit-stock 0
          set fruit-nb min (list (current-fruit-stock / one-fruit-weight) max-fruit-nb)
          set seed-nb fruit-nb * seed-nb-per-fruit
          
          hide-turtle
  

        ]
      ]
    ]
  ]
end


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Création de nouvelles populations d'arbres d'un an ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to renew-tree-population
  let total-new-trees 0
  ; Cette procédure sera appelée uniquement en Nduungu une fois par saison
  ask patches [
    let new-trees-by-type []

    ; Calculer le nombre de nouvelles pousses pour chaque type d'arbre sur le patch
    ask tree-populations-here [
      ; Calculer les nouvelles pousses
      let new-trees 0
      ifelse dormance-needed = "yes" [
        set new-trees floor (( (soil-current-fruit-stock / one-fruit-weight) * seed-nb-per-fruit * germination-rate / 100) + germinated-seed-nb * min (list ((germination-rate / 100) + 0.2) 1))
      ] [
        set new-trees floor (( (soil-current-fruit-stock / one-fruit-weight) * seed-nb-per-fruit * germination-rate / 100) + germinated-seed-nb * min (list (germination-rate / 100) 1))
      ]
        
      set germinated-seed-nb 0
      set soil-current-fruit-stock 0
      set new-trees min (list new-trees [max-tree-number] of patch-here)

      ; Ajouter les nouvelles pousses au total pour ce type d'arbre
      let current-type-entry filter [x -> item 0 x = tree-type] new-trees-by-type
      ifelse length current-type-entry > 0 [
        ; Si le type existe déjà, additionner les nouvelles pousses à la quantité existante
        let existing-entry first current-type-entry
        set new-trees-by-type replace-item (position existing-entry new-trees-by-type) new-trees-by-type
        (list tree-type (item 1 existing-entry + new-trees))
      ] [
        ; Sinon, créer une nouvelle entrée pour ce type d'arbre
        set new-trees-by-type lput (list tree-type new-trees) new-trees-by-type
      ]
    ]

    ; Créer de nouvelles populations d'arbres pour chaque type d'arbre en fonction des nouvelles pousses calculées
    foreach new-trees-by-type [ [type-and-count] ->
      let new-tree-type item 0 type-and-count
      let number item 1 type-and-count
      if number > 0 [
        sprout-tree-populations 1 [
          set tree-type new-tree-type
          set tree-pop-age 1
          set population-size number
          let soil-types [soil-type] of patch-here
          ; Initialiser les stocks actuels
          let age-data get-age-data soil-types new-tree-type tree-pop-age 
          let max-leaf item 0 age-data
          let max-fruit item 1 age-data
          let max-wood item 2 age-data
          let accessible item 3 age-data
          let max-fruits-nb item 4 age-data
          set max-fruit-stock max-fruit * population-size / 1000
          set max-leaf-stock max-leaf * population-size / 1000
          set max-wood-stock max-wood * population-size / 1000
          set leaves-percent-accessible accessible
          set fruits-percent-accessible accessible
          set max-fruit-nb max-fruits-nb * population-size
          
          let germination-rates get-germination-data soil-types tree-type
          set germination-rate item 0 germination-rates
          set young-regen-rate item 1 germination-rates
          set dormance-needed item 2 germination-rates
          set one-fruit-weight item 3 germination-rates / 1000
          set seed-nb-per-fruit item 4 germination-rates
          set one-seed-weight item 5 germination-rates / 1000
          set ratio-consumable item 6 germination-rates
          
          let nutritional-values get-tree-nutritional-data tree-type soil-types current-season
          set leaves-status item 0 nutritional-values
          set leaves-UF-per-kg-MS item 1 nutritional-values
          set leaves-MAD-per-kg-MS item 2 nutritional-values
          set fruits-status item 3 nutritional-values
          set fruits-UF-per-kg-MS item 4 nutritional-values
          set fruits-MAD-per-kg-MS item 5 nutritional-values
          
          set current-fruit-stock (max-fruit-stock / 2)
          set current-leaf-stock (max-leaf-stock / 2)
          set current-wood-stock max-wood-stock
          set soil-current-fruit-stock 0
          set fruit-nb min (list (current-fruit-stock / one-fruit-weight) max-fruit-nb)
          set seed-nb fruit-nb * seed-nb-per-fruit
          
          hide-turtle
        ; Mettre à jour les stocks actuels si nécessaire
        ]
      ]
    ]
  ]
end



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Mise à jour des valeurs nutritives des arbres. Mise à jour par saison ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to update-tree-nutritional-values
  
  ask tree-populations [
    let soil-types [soil-type] of patch-here
    let nutritional-values get-tree-nutritional-data tree-type soil-types current-season
    set leaves-status item 0 nutritional-values
    set leaves-UF-per-kg-MS item 1 nutritional-values
    set leaves-MAD-per-kg-MS item 2 nutritional-values
    set fruits-status item 3 nutritional-values
    set fruits-UF-per-kg-MS item 4 nutritional-values
    set fruits-MAD-per-kg-MS item 5 nutritional-values
     ]
end


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Croissance des stocks des ressources des arbres. Mise à jour quotidienne ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to grow-tree-resources
  ask tree-populations with [population-size > 0] [
    let soil-types [soil-type] of patch-here
    let age-data get-age-data soil-types tree-type tree-pop-age
    let max-leaf item 0 age-data
    let max-fruit item 1 age-data
    let max-wood item 2 age-data
    let accessible item 3 age-data
    let max-fruits-nb item 4 age-data
    
    ; Réactualiser le max de bois en fonction de la population restante
    set max-wood-stock max-wood * population-size / 1000
    
    ; Croissance ou décroissance logistique du bois
    let wood-growth growth-wood-logistic current-wood-stock max-wood-stock leaves-status current-season
    
    let new-wood-stock current-wood-stock + wood-growth
    set current-wood-stock min (list new-wood-stock max-wood-stock)
    
    
    ; Ratio de bois par population
    set wood-ratio calculate-wood-ratio
    if (wood-ratio < 0.05) [
      set population-size population-size - 1
      set trees-killed trees-killed + 1
      set wood-ratio calculate-wood-ratio
      if population-size <= 0 [
        die
      ]
    ]
    ; Réactualiser le max de fruits et feuilles  en fonction de la population restante et du bois
    set max-fruit-stock max-fruit * population-size * wood-ratio / 1000
    set max-leaf-stock max-leaf * population-size * wood-ratio / 1000
    set max-fruit-nb max-fruits-nb * population-size * wood-ratio
    
    ; Croissance ou décroissance logistique des fruits
    let fruit-growth growth-fruit-logistic current-fruit-stock max-fruit-stock fruits-status current-season
    let new-fruit-stock current-fruit-stock + fruit-growth
    if fruit-growth < 0 [ 
      set soil-current-fruit-stock min (list (soil-current-fruit-stock - fruit-growth) max-fruit-stock)
    ]
    set current-fruit-stock min (list new-fruit-stock max-fruit-stock)
    if current-fruit-stock <= 0 [set current-fruit-stock 1 ]
    
    if soil-current-fruit-stock > 1 [
      set soil-current-fruit-stock soil-current-fruit-stock  - 0.005 * (precision soil-current-fruit-stock 1)
    ]
    if germinated-seed-nb > 1 [
      set germinated-seed-nb round germinated-seed-nb - (0.001 * germinated-seed-nb)
    ]
    set fruit-nb min (list (current-fruit-stock / one-fruit-weight) max-fruit-nb)
    set seed-nb fruit-nb * seed-nb-per-fruit
    
    ; Croissance ou décroissance logistique des feuilles
    let leaf-growth growth-leaf-logistic current-leaf-stock max-leaf-stock leaves-status current-season
    let new-leaf-stock current-leaf-stock + leaf-growth
    set current-leaf-stock min (list new-leaf-stock max-leaf-stock)
    if current-leaf-stock <= 0 [set current-leaf-stock 1 ]
  ]
  ask tree-populations with [population-size <= 0] [die]

end
