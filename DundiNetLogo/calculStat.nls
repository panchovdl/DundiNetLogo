globals [
  ;; output
  totalFoyers
  totalSheeps
  totalCattles
  ticks-wih-transhumants
  mst-temps-passe
  
  totalLocalFoyers
  
  totalTransFoyers
  totalTransSheeps
  totalTransCattles
  
  waterStock
  sheepsTempCamp
  cattlesTempCamp
  sheepsHaveLeft
  cattlesHaveLeft
  sheepsWeightGain
  cattlesWeightGain
  meanSheepsLiveWeight
  maxSheepsLiveWeight
  minSheepsLiveWeight
  meanCattlesLiveWeight
  maxCattlesLiveWeight
  minCattlesLiveWeight
  meanSheepsNEC
  meanCattlesNEC
  meanSheepsGrassEaten
  meanCattlesGrassEaten
  MSTSheep-NEC
  MSTCattle-NEC
  MSTTransSheep-NEC
  MSTTransCattle-NEC
  MSTTransFoyers-duration
  
  
  trees-killed
  
  transSheepsWeightGain
  transCattlesWeightGain
  meanTransCattlesLiveWeight
  maxTransCattlesLiveWeight
  minTransCattlesLiveWeight
  meanTransSheepsLiveWeight
  maxTransSheepsLiveWeight
  minTransSheepsLiveWeight
  meanTransCattlesNEC
  meanTransSheepsNEC
  
  
  meanTrees1yearsByPatch
  meanTrees2yearsByPatch
  meanTrees3yearsByPatch
  meanTrees4yearsByPatch
  meanTrees5yearsByPatch
  meanTrees6yearsByPatch
  meanTrees7yearsByPatch
  meanTrees8yearsByPatch
  meanTreesYoungsByPatch
  meanTreesOldesByPatch
  totalTrees
  totalTreesOldes
  totalTreesYoung
  traj-trees
  MST-trees
  
  patches-caangol 
  patches-seeno 
  patches-baldiol 
  patches-sangre 
  
  meanTreesInCaangol
  meanTreesInSeeno
  meanTreesInBaldiol
  meanTreesInSangre
  
  good-patches-caangol
  good-patches-seeno 
  good-patches-baldiol 
  good-patches-sangre 
  
  totalGPCaangol
  totalGPSeeno
  totalGPBaldiol
  totalGPSangre
  
  traj-satisfaction-Seeno
  traj-satisfaction-Baldiol
  traj-satisfaction-Sangre
  traj-satisfaction-Caangol
  
  MST-Seeno
  MST-Baldiol
  MST-Sangre
  MST-Caangol
  
  
  totalGrass
  meanGrass
  meanFruitsConsumedCattle
  meanLeavesConsumedCattle
  meanFruitsConsumedSheep 
  meanLeavesConsumedSheep 
  
  sumSmallHerder
  sumMediumHerder
  sumLargeHerder
  
  meanDistantKnownSpaceSheeps
  meanDistantKnownSpaceCattles
]

to calculStat
  
  
  
  
  set totalGrass sum [current-grass] of patches
  set meanGrass mean [current-grass] of patches
  set totalTrees sum [population-size] of tree-populations
  
  
  set meanTrees8yearsByPatch sum [population-size] of tree-populations with [tree-pop-age >= 8] / count patches
  set meanTrees7yearsByPatch sum [population-size] of tree-populations with [tree-pop-age = 7] / count patches
  set meanTrees6yearsByPatch sum [population-size] of tree-populations with [tree-pop-age = 6] / count patches
  set meanTrees5yearsByPatch sum [population-size] of tree-populations with [tree-pop-age = 5] / count patches
  set meanTrees4yearsByPatch sum [population-size] of tree-populations with [tree-pop-age = 4] / count patches
  set meanTrees3yearsByPatch sum [population-size] of tree-populations with [tree-pop-age = 3] / count patches
  set meanTrees2yearsByPatch sum [population-size] of tree-populations with [tree-pop-age = 2] / count patches
  set meanTrees1yearsByPatch sum [population-size] of tree-populations with [tree-pop-age = 1] / count patches
  set meanTreesOldesByPatch sum [population-size] of tree-populations with [tree-pop-age > 4] / count patches
  set meanTreesYoungsByPatch sum [population-size] of tree-populations with [tree-pop-age <= 4] / count patches

  set meanFruitsConsumedCattle mean [fruits-eaten] of cattles with [have-left = false and is-transhumant = false]
  set meanLeavesConsumedCattle mean [leaves-eaten] of cattles with [have-left = false and is-transhumant = false]
  set meanFruitsConsumedSheep  mean [fruits-eaten] of sheeps with [have-left = false and is-transhumant = false]
  set meanLeavesConsumedSheep mean [leaves-eaten] of sheeps with [have-left = false and is-transhumant = false]
  
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Intégration des variables agents ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  
  ;; Locaux 
  
  set totalFoyers count foyers
  set totalLocalFoyers count foyers with [is-transhumant = false] 
  set totalCattles sum [head] of cattles with [is-transhumant = false]
  set totalSheeps sum [head] of sheeps with [is-transhumant = false]
    
  set cattlesHaveLeft count cattles with [have-left = true]
  set sheepsHaveLeft count sheeps with [have-left = true]
    

  set sheepsTempCamp count sheeps with [is-in-temporary-camp = true and is-transhumant = false]
  set cattlesTempCamp count cattles with [is-in-temporary-camp = true and is-transhumant = false]
  
  ;; Transhumants
  
  set totalTransCattles sum [head] of cattles with [is-transhumant = true]
  set totalTransSheeps sum [head] of sheeps with [is-transhumant = true]
  set totalTransFoyers count foyers with [is-transhumant = true]
  set mst-temps-passe 0
   
  set waterStock sum [water-stock] of patches
  

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Calcul du gain de poids ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   
  ifelse count sheeps with [have-left = false and is-transhumant = false] > 0 [
    set sheepsWeightGain mean [weight-gain] of sheeps with [have-left = false and is-transhumant = false]
  ] [
    set sheepsWeightGain 0
  ]
  
  ifelse count cattles with [have-left = false and is-transhumant = false] > 0 [  
    set cattlesWeightGain mean [weight-gain] of cattles with [have-left = false and is-transhumant = false]
  ] [
    set cattlesWeightGain 0
  ]
  ;  min, max & average of Cattle Weight  
  ifelse count cattles with [have-left = false and is-transhumant = false] > 0 [
    set meanCattlesLiveWeight (mean [live-weight] of cattles with [have-left = false and is-transhumant = false]) / (mean [head]  of cattles with [have-left = false and is-transhumant = false])
    let oneMaxCattleHerd one-of cattles with [have-left = false and is-transhumant = false] with-max [live-weight]
    set maxCattlesLiveWeight ( [live-weight] of oneMaxCattleHerd) / ([head] of oneMaxCattleHerd)
    let oneMinCattleHerd one-of cattles with [have-left = false and is-transhumant = false] with-min [live-weight]
    set minCattlesLiveWeight ([live-weight] of oneMinCattleHerd) / ([head] of oneMinCattleHerd)
  ][
    set meanCattlesLiveWeight 0
    set maxCattlesLiveWeight 0
    set minCattlesLiveWeight 0
  ]
 ;  min, max & average of Sheep Weight   
  ifelse count sheeps with [have-left = false and is-transhumant = false] > 0 [  
  set meanSheepsLiveWeight (mean [live-weight] of sheeps with [have-left = false and is-transhumant = false]) / (mean [head]  of sheeps with [have-left = false and is-transhumant = false])
    let oneMaxSheepHerd one-of sheeps with [have-left = false and is-transhumant = false] with-max [live-weight]
    set maxSheepsLiveWeight ( [live-weight] of oneMaxSheepHerd) / ([head] of oneMaxSheepHerd)
    let oneMinSheepHerd one-of sheeps with [have-left = false and is-transhumant = false] with-min [live-weight]
    set minSheepsLiveWeight ([live-weight] of oneMinSheepHerd) / ([head] of oneMinSheepHerd)
  ][
    set meanSheepsLiveWeight 0
    set maxSheepsLiveWeight 0
    set minSheepsLiveWeight 0
  ]
  
  

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Calcul de la NEC Locaux ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  
  if count cattles with [have-left = false and is-transhumant = false] > 0[ ;; Est-ce qu'il y a quelque chose a faire dans le else ?
    set meanCattlesNEC mean [corporal-condition] of cattles with [have-left = false and is-transhumant = false]
  ]
  if count sheeps with [have-left = false and is-transhumant = false] > 0 [ ;; Est-ce qu'il y a quelque chose a faire dans le else ?
    set meanSheepsNEC mean [corporal-condition] of sheeps with [have-left = false and is-transhumant = false]
  ]
  
  if ticks > 0 [
    ask foyers with [is-transhumant = false] [
      if sheep-herd != nobody [
        if SheepNECSatifactionIndex <= [corporal-condition] of sheep-herd [
          set sheepNEC-satisfaction (sheepNEC-satisfaction + 1)
        ]
      ]
      if cattle-herd != nobody [
        if CattleNECSatifactionIndex <= [corporal-condition] of cattle-herd [
          set cattleNEC-satisfaction (cattleNEC-satisfaction + 1)
        ]
      ]
    ]
    set MSTSheep-NEC (mean[sheepNEC-satisfaction] of foyers with [is-transhumant = false]) / ticks
    set MSTCattle-NEC (mean[cattleNEC-satisfaction] of foyers with [is-transhumant = false]) / ticks
  ]
  
    if count sheeps with [have-left = false and is-transhumant = false] > 0 [ ;; Est-ce qu'il y a quelque chose a faire dans le else ?
    set meanSheepsGrassEaten mean [mean-DM-ingested] of sheeps with [have-left = false and is-transhumant = false]
  ]
   if count cattles with [have-left = false and is-transhumant = false] > 0[ ;; Est-ce qu'il y a quelque chose a faire dans le else ?
    set meanCattlesGrassEaten mean [mean-DM-ingested] of cattles with [have-left = false and is-transhumant = false]
  ]
  


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Calcul de la NEC Transhumants ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  
  ;; y a-t-il encore des troupeaux transhumants en jeu ?
  let trans-cattles cattles with [have-left = false and is-transhumant = true]
  let trans-sheeps  sheeps  with [have-left = false and is-transhumant = true]
  
  ifelse TotalTransFoyers > 0 [
    ;; on incrémente le dénominateur
    set ticks-with-transhumants ticks-with-transhumants + 1
  ] [
    set ticks-wih-transhumants 0
  ]
  
  ifelse count sheeps with [have-left = false and is-transhumant = true] > 0 [
    set transSheepsWeightGain mean [weight-gain] of sheeps with [have-left = false and is-transhumant = true]
  ] [
    set transSheepsWeightGain 0
  ]
  ifelse count cattles with [have-left = false and is-transhumant = true] > 0 [  
    set transCattlesWeightGain mean [weight-gain] of cattles with [have-left = false and is-transhumant = true]
  ] [
    set transCattlesWeightGain 0
  ]

  ;  min, max & average of Cattle Weight  
  ifelse count cattles with [have-left = false and is-transhumant = true] > 0 [
    set meanTransCattlesLiveWeight (mean [live-weight] of cattles with [have-left = false and is-transhumant = true]) / (mean [head]  of cattles with [have-left = false and is-transhumant = true])
    let oneMaxTransCattleHerd one-of cattles with [have-left = false and is-transhumant = true] with-max [live-weight]
    set maxTransCattlesLiveWeight ( [live-weight] of oneMaxTransCattleHerd) / ([head] of oneMaxTransCattleHerd)
    let oneMinTransCattleHerd one-of cattles with [have-left = false and is-transhumant = true] with-min [live-weight]
    set minTransCattlesLiveWeight ([live-weight] of oneMinTransCattleHerd) / ([head] of oneMinTransCattleHerd)
  ][
    set meanTransCattlesLiveWeight 0
    set maxTransCattlesLiveWeight 0
    set minTransCattlesLiveWeight 0
  ]
 ;  min, max & average of Sheep Weight   
  ifelse count sheeps with [have-left = false and is-transhumant = true] > 0 [  
    set meanTransSheepsLiveWeight (mean [live-weight] of sheeps with [have-left = false and is-transhumant = true]) / (mean [head]  of sheeps with [have-left = false and is-transhumant = true])
    let oneMaxTransSheepHerd one-of sheeps with [have-left = false and is-transhumant = true] with-max [live-weight]
    set maxTransSheepsLiveWeight ( [live-weight] of oneMaxTransSheepHerd) / ([head] of oneMaxTransSheepHerd)
    let oneMinTransSheepHerd one-of sheeps with [have-left = false and is-transhumant = true] with-min [live-weight]
    set minTransSheepsLiveWeight ([live-weight] of oneMinTransSheepHerd) / ([head] of oneMinTransSheepHerd)
  ][
    set meanTransSheepsLiveWeight 0
    set maxTransSheepsLiveWeight 0
    set minTransSheepsLiveWeight 0
  ]
  
  
  
  
  
  if TotalTransFoyers > 0 [ ;; Est-ce qu'il y a quelque chose a faire dans le else ?
    set meanTransCattlesNEC mean [corporal-condition] of cattles with [have-left = false and is-transhumant = true]
    set meanTransSheepsNEC mean [corporal-condition] of sheeps with [have-left = false and is-transhumant = true]
  ]

  
  ifelse (ticks-with-transhumants > 0 and totalTransFoyers > 0) [
    
       ask foyers with [is-transhumant = true] [
      if sheep-herd != nobody [
        if SheepNECSatifactionIndex <= [corporal-condition] of sheep-herd [
          set transSheepNEC-satisfaction (transSheepNEC-satisfaction + 1)
        ]
      ]
      if cattle-herd != nobody [
        if CattleNECSatifactionIndex <= [corporal-condition] of cattle-herd [
          set transCattleNEC-satisfaction (transCattleNEC-satisfaction + 1)
        ]
      ]
    ]
    set MSTTransSheep-NEC (mean [transSheepNEC-satisfaction] of foyers with [is-transhumant = true]) / ticks-with-transhumants
    set MSTTransCattle-NEC (mean [transCattleNEC-satisfaction] of foyers with [is-transhumant = true]) / ticks-with-transhumants
  ] [
    
    set MSTTransSheep-NEC MSTTransSheep-NEC
    set MSTTransCattle-NEC MSTTransCattle-NEC
  ]
  
    let nb-satisfaits count foyers with [
    is-transhumant = true and
    global-satisfaction = 1   ;; le slider%
  ]
  
ifelse TotalTransFoyers > 0 [
  set mst-temps-passe mst-temps-passe + (nb-satisfaits / TotalTransFoyers)
  ] [
stop
  ]
   
  
;  if ticks > 0 [
;    if TreeDensitySatisfaction-olds < totalTreesOldes [
;      set traj-trees traj-trees  + 1
;    ]
;    set MST-trees traj-trees / ticks
;  ]
  
  
  
  
  set caangol-surface count patches with [soil-type = "Caangol"]
  set sangre-surface count patches with [soil-type = "Sangre"]
  set baldiol-surface count patches with [soil-type = "Baldiol"]
  set seeno-surface count patches with [soil-type = "Seeno"]


  set patches-caangol patches with [ soil-type = "Caangol"]
  set good-patches-caangol patches-caangol with [ (sum [population-size] of tree-populations-here with [tree-pop-age > 4]) > (SatisfactionMeanTreesInCaangol * 100)]
  set patches-seeno patches with [ soil-type = "Seeno"]
  set good-patches-seeno patches-seeno with [ (sum [population-size] of tree-populations-here with [tree-pop-age > 4]) > (SatisfactionMeanTreesInSeeno * 100)]
  set patches-baldiol patches with [ soil-type = "Baldiol"]
  set good-patches-baldiol patches-baldiol with [ (sum [population-size] of tree-populations-here with [tree-pop-age > 4]) > (SatisfactionMeanTreesInBaldiol * 100)]
  set patches-sangre patches with [ soil-type = "Sangre"]
  set good-patches-sangre patches-sangre with [ (sum [population-size] of tree-populations-here with [tree-pop-age > 4]) > (SatisfactionMeanTreesInSangre * 100)]
  
  set totalGPSeeno count good-patches-seeno
  set totalGPCaangol count good-patches-caangol
  set totalGPBaldiol count good-patches-baldiol
  set totalGPSangre count good-patches-sangre
  
  
  set meanTreesInCaangol (sum [population-size] of tree-populations-on patches with [soil-type = "Caangol"] / caangol-surface) / 100
  set meanTreesInSangre (sum [population-size] of tree-populations-on patches with [soil-type = "Sangre"] / sangre-surface) / 100
  set meanTreesInBaldiol (sum [population-size] of tree-populations-on patches with [soil-type = "Baldiol"] / baldiol-surface) / 100
  set meanTreesInSeeno (sum [population-size] of tree-populations-on patches with [soil-type = "Seeno"] / seeno-surface) / 100
 
  if ticks > 0 [
    if totalGPSeeno >= treshold-tree-satisfaction * seeno-surface [
     set traj-satisfaction-Seeno traj-satisfaction-Seeno + 1  
    ]
    if totalGPBaldiol >= treshold-tree-satisfaction * baldiol-surface [
     set traj-satisfaction-Baldiol traj-satisfaction-Baldiol + 1  
    ]
    if totalGPSangre >= treshold-tree-satisfaction * sangre-surface [
     set traj-satisfaction-Sangre traj-satisfaction-Sangre + 1  
    ]
    if totalGPCaangol >= treshold-tree-satisfaction * caangol-surface [
     set traj-satisfaction-Caangol traj-satisfaction-Caangol + 1  
    ]
    
    set MST-Seeno traj-satisfaction-Seeno / ticks
    set MST-Baldiol traj-satisfaction-Baldiol / ticks
    set MST-Sangre traj-satisfaction-Sangre / ticks
    set MST-Caangol traj-satisfaction-Caangol / ticks
  ]
  
  set sumSmallHerder count foyers with [herder-type = "petit"]
  set sumMediumHerder count foyers with [herder-type = "moyen"]
  set sumLargeHerder count foyers with [herder-type = "grand"]
  
  set meanDistantKnownSpaceSheeps meanKnownSpace (sheeps with [not is-transhumant])
  set meanDistantKnownSpaceCattles meanKnownSpace (cattles with [not is-transhumant])
end
