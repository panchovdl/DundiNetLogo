;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Initialisation des patches ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to setup-landscape
  ask patches [
    set max-tree-cover tree-cover
    if soil-type = "Baldiol" [
      set K K-Baldiol  ; Stock de production de Matière Sèche (MS - DM[en]) sur 1 km² pour "Baldiol"
      set K-max K-Baldiol ; stock max
      set current-grass 100
      set num-nutritious round (tree-cover * 0.4)
      set num-less-nutritious round (tree-cover * 0.3)
      set num-fruity round (tree-cover * 0.3)
      set patch-sensitivity 2
      set max-tree-number 8000
    ]
    if soil-type = "Caangol" [
      set K K-Caangol  ; Stock de production de Matière Sèche (MS - DM[en]) sur 1 km² pour Caangol
      set K-max K-Caangol ; stock max
      set current-grass 100
      set num-nutritious round (tree-cover * 0.5)
      set num-less-nutritious round (tree-cover * 0.25)
      set num-fruity round (tree-cover * 0.25)
      set patch-sensitivity 2
      set max-tree-number 20000
    ]
    if soil-type = "Sangre" [
      set K K-Sangre  ; Stock de production de Matière Sèche (MS - DM[en]) sur 1 km² pour Sangre
      set K-max K-Sangre ; stock max
      set current-grass 100
      set num-nutritious round (tree-cover * 0.3)
      set num-less-nutritious round (tree-cover * 0.1)
      set num-fruity round (tree-cover * 0.2)
      set patch-sensitivity 3
      set max-tree-number 15000
    ]
    if soil-type = "Seeno" [
      set K K-Seeno  ; Stock de production de Matière Sèche (MS - DM[en]) sur 1 km² pour Seeno
      set K-max K-Seeno ; stock max
      set current-grass 100
      set num-nutritious round (tree-cover * 0.4)
      set num-less-nutritious round (tree-cover * 0.2)
      set num-fruity round (tree-cover * 0.4)
      set patch-sensitivity 1
      set max-tree-number 5000
    ]
    if soil-type = "" [
      set current-grass 1
      set K 1  ; Stock de production maximal de Matière Sèche (MS - DM[en]) sur 1 km² pour Seeno
               ;     if current-season = "Nduungu" [set grass-quality "average"] ;; A garder si jamais on simplifie la règle
               ;     if current-season = "Dabbuunde" [set grass-quality "poor"] ;; A garder si jamais on simplifie la règle
               ;     if current-season = "Ceedu" [set grass-quality "good"] ;; A garder si jamais on simplifie la règle
               ;     if current-season = "Ceetcelde" [set grass-quality "average"] ;; A garder si jamais on simplifie la règle
    ]
    set has-pond false  ; Initialement, aucune mare
    set water-stock 0  ; Initialement, aucun stock d'eau dans les mares
    set has-camps false
    set is-fenced false
  ]
  assign-grass-proportions
end


to setup-reforestation-plots
  let count-plots 0
  set current-plot-id 0
  
  ; On récupère des patches libres, par ex. has-camps = false, pas déjà protégé
  let free-patches patches with [ (has-camps = false) and (not is-fenced)]
  let free-patch-list shuffle sort free-patches
  
  foreach free-patch-list [ potential-plot ->
    if count-plots >= reforestation-plots-number [ stop ]
    
    ; Vérifier qu’il existe au moins 2 campements à distance ≤ 2
    let close-camps camps with [ distance potential-plot <= 2 ]
    if (count close-camps >= 2) [
      ; (A) On crée un "nouvel ID" pour cette parcelle
      set current-plot-id current-plot-id + 1
      
      ; (B) On protège potential-plot
      ask potential-plot [
        if not any? neighbors with [is-fenced = true] [
          set is-fenced true
          set plot-id current-plot-id
          set pcolor orange
          
          ; (C) Tirage au sort pour un patch voisin contigu
          if (random-float 1 < 0.9) [
            let neighbor-p neighbors4
            let good-neighbors-p neighbor-p with [
              (not is-fenced) and (has-camps = false) and (not any? neighbors with [
                is-fenced = true and plot-id != current-plot-id 
              ])
            ]
            if any? good-neighbors-p [
              let one-neighbor one-of good-neighbors-p
              ask one-neighbor [
                set is-fenced true
                set plot-id current-plot-id
                set pcolor orange
              ]
            ]
          ]
          
          ; (D) Incrément du compteur (on considère qu’on a créé 1 parcelle)
          set count-plots count-plots + 1
        ]
      ]
    ]
  ]
  show (word "Nombre de parcelles créées: " count-plots)
end


;
;to setup-reforestation-plots
;  ;; On mélange la liste de tous les patches afin de les traiter dans un ordre aléatoire
;  let count-plots 0
;  let free-patches (patches with [has-camps = false])
;  show free-patches
;  while [count-plots < reforestation-plots-number] [
;    let plots []
;    let COGES no-turtles
;    ;; 1) Si ce patch n'est pas encore protégé, on regarde les campements dans un rayon de 2 et qui n'ont pas déjà de parcelles
;    let potential-plot one-of free-patches with [is-fenced = false]
;    if potential-plot = nobody [stop]
;    let close-camps camps with [(distance potential-plot <= 2) and (reforestation-plot = [])]
;    ;; On exige plusieurs campements (≥ 2) à proximité
;    ifelse count close-camps >= 2 [
;      
;      ;; a) Protéger le patch p
;      ask potential-plot [
;        set is-fenced true
;        set owner-camps min-one-of close-camps [distance myself]
;        set pcolor orange
;      ] ; 
;      set free-patches free-patches - potential-plot
;      set plots lput potential-plot plots
;      set count-plots count-plots + 1
;      ;; b) Chercher un patch voisin immédiat (neighbors) également libre
;      if random-float 1 < 0.7 [
;        let neighboring-patch one-of [neighbors4] of potential-plot with [(is-fenced = false) and (has-camps = false)]
;        if neighboring-patch != nobody [
;          
;          ;; On protège aussi ce patch voisin pour le même campement principal
;          ask neighboring-patch [
;            set is-fenced true
;            set pcolor orange
;            set owner-camps [owner-camps] of potential-plot
;          ]
;          set plots lput neighboring-patch plots
;          set free-patches free-patches - neighboring-patch
;        ] ; end if neighboring-patch =! nobody
;      ] ; end random-float
;      set COGES [owner-camps] of plots
;      
;      ;; On collecte les campements présents dans ces patches partagés
;      ;;   (autrement dit, tout camp qui se trouve sur un patch de patches-partages)
;      let COGES-potentiel camps with [(distance potential-plot <= 4) and (reforestation-plot = [])]
;      
;      ;; On retire camp-principal si on veut éviter les doublons 
;      ;; (ou bien on peut le laisser, selon la logique souhaitée)
;      ;; set camps-partages remove camp-principal camps-partages
;      
;      ;; S'il y a au moins un campement, on en choisit entre 1 et 5
;      if any? COGES-potentiel [
;        ;; Combien de campements additionnels prend-on ? => entre 1 et 5
;        let COGES-supp n-of (min list (count COGES-potentiel) COGES-camps) COGES-potentiel
;        set COGES (turtle-set COGES COGES-supp)
;        ;; Réciproque côté camp
;        ask COGES [
;          set reforestation-plot lput plots reforestation-plot
;        ]
;        ;; Et on les enregistre également comme propriétaires
;        ask plots [
;          set owner-camps lput COGES owner-camps
;        ]
;      ] ; end if any? COGES-potentiels
;    ] [
;      set free-patches free-patches - potential-plot  ; end if count camps-proches >= 2
;    ]
;  ] ; end while
;
;end


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Mise à jour du stock de l'herbe selon les proportions des deux espèces herbacées. Mise à jour quotidienne ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


to grow-grass  ; - Version 2.2.

  let multiplier decreasing-factor
  ask patches [
    let r_grass 0 ; Taux de croissance de l'herbe, uniforme pour tous les types d'herbe
                  ; Croissance logistique pendant Nduungu
    let new-mono-grass 0
    let new-dicot-grass 0
    if current-season = "Nduungu" [
      set r_grass 0.2
      set multiplier 1
    ]
    if current-season = "Dabbuunde" [
      set r_grass -0.001
      if current-grass >= (0.95 * K) [ set r_grass -0.5]
    ]
    if current-season = "Ceedu" [
      set r_grass -0.001
    ]
    if current-season = "Ceetcelde" [
      set r_grass -0.001
    ]

    ; Croissance logistique pour les dicotylédones
    set new-mono-grass current-monocot-grass + r_grass * current-monocot-grass * multiplier * (K * p - current-monocot-grass) / (K * p)
    ; Croissance logistique pour les dicotylédones
    set new-dicot-grass current-dicot-grass + r_grass * current-dicot-grass * multiplier * (K * (1 - p) - current-dicot-grass) / (K * (1 - p))


    set current-monocot-grass min (list new-mono-grass (K * p))
    set current-dicot-grass min (list new-dicot-grass (K * (1 - p)))
    ; Mettre à jour le stock total d'herbe
    set current-grass current-monocot-grass + current-dicot-grass

    ;  let new-current-grass current-grass + r * current-grass * (K - current-grass) / K
    ;  set current-grass min (list new-current-grass K)


    ; Assurer que les valeurs restent positives
    if current-monocot-grass <= 0 [ set current-monocot-grass 1 ]
    if current-dicot-grass <= 0 [ set current-dicot-grass 1]
    if current-grass <= 0 [ set current-grass 1 ]
  ]
end




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Mise à jour des proportions d'herbe. Mise à jour par an ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to assign-grass-proportions ; Réassigner la proportion de monocotylédones (p) en fonction du type de sol
  ask patches [
    if soil-type = "Baldiol" [
      set p random-float (0.0 - 0.1) + 0.7  ; Intervalle [0.3, 0.5]
    ]
    if soil-type = "Caangol" [
      set p random-float (0.0 - 0.1) + 0.8  ; Intervalle [0.1, 0.4]
    ]
    if soil-type = "Sangre" [
      set p random-float (0.0 - 0.1) + 0.6  ; Intervalle [0.3, 0.6]
    ]
    if soil-type = "Seeno" [
      set p random-float (0.0 - 0.1) + 0.65  ; Intervalle [0.6, 0.8]
    ]
    
    ; Assurer que p est entre 0 et 1
    set p max list 0.2 (min list p 1)
    ; Réinitialiser les stocks d'herbe en fonction des nouvelles proportions
    set current-monocot-grass current-grass * p
    set current-dicot-grass current-grass * (1 - p)
  ]
end


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Mise à jour des valeurs nutritives de l'herbe. Mise à jour par saison ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


to update-UF-and-MAD
  ask patches [
    ; Définit pour les deux espèces les valeurs en UF et MAD par kg de MS (valeurs de Boudet, 1975, "Manuel sur les pâturages tropicaux et cultures fourragères" en prenant comme référence une valeur proche des graminées les plus présents (monocotylédones) et zornia comme légumineuse (dicotylédone))
    if current-season = "Nduungu" [
      set monocot-UF-per-kg-MS 0.5
      set monocot-MAD-per-kg-MS 34.4
      set dicot-UF-per-kg-MS 0.77
      set dicot-MAD-per-kg-MS 108.5
    ]
    if current-season = "Dabbuunde" [
      set monocot-UF-per-kg-MS 0.53
      set monocot-MAD-per-kg-MS 41.1
      set dicot-UF-per-kg-MS 0.84
      set dicot-MAD-per-kg-MS 93.5
    ]
    if current-season = "Ceedu" [
      set monocot-UF-per-kg-MS 0.405
      set monocot-MAD-per-kg-MS 1
      set dicot-UF-per-kg-MS 0.6
      set dicot-MAD-per-kg-MS 65.5
    ]
    if current-season = "Ceetcelde" [
      set monocot-UF-per-kg-MS 0.285
      set monocot-MAD-per-kg-MS 0.2
      set dicot-UF-per-kg-MS 0.4
      set dicot-MAD-per-kg-MS 89
    ]
  ]
end


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Mise à jour de la qualité de l'herbe selon les proportions des deux espèces herbacées. Mise à jour quotidienne ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to update-grass-quality ; - Version 2
  ask patches [
    ; Calculer le rapport MAD/UF pour les monocotylédones
    let mean-UF-per-kg-DM  ((monocot-UF-per-kg-MS * current-monocot-grass) + (dicot-UF-per-kg-MS * current-dicot-grass)) / (current-monocot-grass + current-dicot-grass)
    let mean-MAD-per-kg-DM  ((monocot-MAD-per-kg-MS * current-monocot-grass) + (dicot-MAD-per-kg-MS * current-dicot-grass)) / (current-monocot-grass + current-dicot-grass)
    ; Déterminer la qualité de l'herbe en fonction du rapport moyen MAD/UF
    ifelse ((mean-UF-per-kg-DM >= seuil-bon-UF) AND (mean-MAD-per-kg-DM >= seuil-bon-MAD)) [
      set grass-quality "good"
      ] [ ifelse ((mean-UF-per-kg-DM >= seuil-moyen-UF) AND (mean-UF-per-kg-DM <= seuil-bon-UF) AND (mean-MAD-per-kg-DM >= seuil-moyen-MAD) AND (mean-MAD-per-kg-DM <= seuil-bon-MAD))  [
        set grass-quality "average"
      ] [
        set grass-quality "poor"
      ]
      ; Assigner q basé sur la qualité actuelle de l'herbe
    ]
    set q grass-quality-to-q grass-quality
  ]
end



