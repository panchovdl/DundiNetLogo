
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Initialisation des troupeaux ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to setup-herds ; Valeurs à définir
  ask foyers [
    create-herds-for-me
  ]
end

to create-herds-for-me 
  
  let my-pasture-strategy pasture-strategy
  let my-shepherd-type shepherd-type  ; Récupérer le shepherd-type du foyer
  let my-cattle-count cattle-herd-count
  let my-sheep-count sheep-herd-count
  ; Créer un troupeau de bovins pour le foyer
  let my-cattles []
  hatch-cattles 1 [
    
    ; caractéristiques physiologiques
    set head my-cattle-count
    if head = 0 [ die ]
    set UBT-size 1
    set corporal-condition 5
    set protein-condition 10
    set initial-live-weight 250 * UBT-size * head
    set live-weight initial-live-weight
    set max-live-weight 350 * head 
    set min-live-weight 66 * head
    
    ; caractéristiques visuelles
    set color grey
    set shape "cow"
    set size calculate-herd-size head  ;; easier to see
    set label-color blue - 2
    set label head
    
    
    ; consommation et gain/perte de poids
    set max-daily-DM-ingestible-per-head 7.2 * UBT-size
    set weight-gain 0
    set daily-water-consumption 22 * head * UBT-size; 22 l/UBT/J de consommation d'eau
    
    
    ; relations avec soi et les reste (propriétaire, environnement)
    set foyer-owner myself
    set my-cattles self  ; Stocker la tortue dans une variable temporaire
    set is-transhumant [is-transhumant] of foyer-owner
    set pasture-strategy my-pasture-strategy  ; Transmettre la stratégie de pâturage
    set shepherd-type my-shepherd-type  ; Transmettre le shepherd-type du foyer
    
    
    ifelse [is-transhumant] of foyer-owner [
      set current-home-patch [current-home-patch] of foyer-owner
      set original-home-patch nobody
      set original-home-camp nobody
      set current-home-camp [current-home-camp] of foyer-owner
      set is-in-temporary-camp true
      set original-camp-known-space nobody
    ] [
      set original-home-patch [original-home-patch] of foyer-owner
      set original-home-camp [original-home-camp] of foyer-owner
      set current-home-patch original-home-patch
      set current-home-camp original-home-camp
      set is-in-temporary-camp false
      set reforestation-plot [reforestation-plot] of myself
      set original-camp-known-space [close-known-space] of foyer-owner
    ]

    move-to current-home-patch
    set xcor xcor + (random-float 0.8 - 0.4)  ;; Décalage entre -0.4 et +0.4
    set ycor ycor + (random-float 0.8 - 0.4)
    
    ; Espace connu et déplacements
    set known-space [known-space] of foyer-owner
    set close-known-space known-space in-radius 6
    set distant-known-space known-space who-are-not close-known-space
    set have-left false
    
  ] ; end hatch-cattle
    ; Attribuer le troupeau créé à son propriétaire
  set cattle-herd my-cattles
  if cattle-herd = [] [
    set cattle-herd nobody]
  
  ; Créer un troupeau de petits ruminants pour le foyer
  let my-sheeps []
  hatch-sheeps 1 [
    
    ; caractéristiques physiologiques
    set head my-sheep-count
    if head = 0 [ die ]
    set UBT-size 0.16
    set corporal-condition 5
    set protein-condition 10
    set initial-live-weight 250 * UBT-size * head
    set live-weight initial-live-weight
    set max-live-weight 80 * head
    set min-live-weight 21 * head
    
    ; caractéristiques visuelles
    set color black
    set shape "sheep"
    set size calculate-herd-size head  ;; easier to see
    set label-color blue - 2
    set label head
    
    ; consommation et gain/perte de poids
    set max-daily-DM-ingestible-per-head 7.2 * UBT-size
    set weight-gain 0
    set daily-water-consumption 22 * head * UBT-size; 22 l/UBT/J de consommation d'eau
    
    ; relations avec soi et les reste (propriétaire, environnement)
    set foyer-owner myself
    set my-sheeps self  ; Stocker la tortue dans une variable temporaire
    set pasture-strategy my-pasture-strategy  ; Transmettre la stratégie de pâturage
    set shepherd-type my-shepherd-type  ; Transmettre le shepherd-type du foyer
    
    
    
    ifelse [is-transhumant] of foyer-owner [
      set current-home-patch [current-home-patch] of foyer-owner
      set original-home-patch nobody
      set original-home-camp nobody
      set current-home-camp [current-home-camp] of foyer-owner
      set is-in-temporary-camp true
      set original-camp-known-space nobody
    ] [
      set original-home-patch [original-home-patch] of foyer-owner
      set original-home-camp [original-home-camp] of foyer-owner
      set current-home-patch original-home-patch
      set current-home-camp original-home-camp
      set is-in-temporary-camp false
      set reforestation-plot [reforestation-plot] of myself
      set original-camp-known-space [close-known-space] of foyer-owner
    ]

    move-to current-home-patch
    set xcor xcor + (random-float 0.8 - 0.4)  ;; Décalage entre -0.4 et +0.4
    set ycor ycor + (random-float 0.8 - 0.4)
    
    ; Espace connu et déplacements
    set known-space [known-space] of foyer-owner
    set close-known-space known-space in-radius 6
    set distant-known-space known-space who-are-not close-known-space
    set have-left false
  ]
  ; Attribuer le troupeau créé à son propriétaire
  set sheep-herd my-sheeps
  if sheep-herd = [] [
    set sheep-herd nobody]
end


to recalcul-herd-parameters
  set initial-live-weight 250 * UBT-size * head
  set live-weight initial-live-weight
  set max-live-weight 350 * head * UBT-size
  set min-live-weight 66 * head * UBT-size

  set max-daily-DM-ingestible-per-head 7.2 * UBT-size
  set daily-min-UF-needed-head 0.45 * max-daily-DM-ingestible-per-head
  set daily-min-MAD-needed-head 25  * max-daily-DM-ingestible-per-head
  set daily-water-consumption 22 * head * UBT-size
  set size calculate-herd-size head
  set label head
end




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Comportement spatial du troupeau ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to go-back-home
  ; stratégie 1 : retour
  ifelse [is-transhumant] of foyer-owner [
    let good-neighbors [neighbors4] of current-home-patch 
    set good-neighbors good-neighbors with [is-fenced = false]
    move-to one-of good-neighbors
  ] [
    ifelse is-in-temporary-camp [
      set current-home-patch original-home-patch
      set current-home-camp original-home-camp
      set is-in-temporary-camp false  
      let free-neigh original-camp-known-space with [is-fenced = false]
      if any? free-neigh [
        move-to one-of free-neigh
      ] ; end if any?
    ] [
      let free-neigh original-camp-known-space with [is-fenced = false]
      if any? free-neigh [
        move-to one-of free-neigh
      ] ; end if any?
    ] ; end of temp-camp
  ] ; end ifelse trans
end

to move
  ;; 1. déterminer le meilleur patch
  let best-patch find-best-nearest-patch known-space shepherd-type current-season FUtility
  
  
  ;; (S'il n'y en a pas)
  
  ifelse best-patch = nobody [
    go-back-home
  ] [
    ;; 2. Vérifier s’il reste de la place sur ce patch
    let patch-with-space patch-has-space? best-patch
    if patch-with-space = nobody [
      let alt nearest-with-space best-patch
      ifelse alt != nobody [ set best-patch alt 
      ] [
        go-back-home
      ] ; end ifelse alt != nobody
    ] ; end best patch doesn't have space
    
    ;; S'il y en a 
    
    set daily-trip distance best-patch
    
    ;; Cas A : le foyer est dans son campement permanent (Non transhumant)
    
    if not is-in-temporary-camp [
      ifelse daily-trip >= 6 [
        ;; créer / déplacer campement ⇐ uniquement si le patch choisi est encore disponible
        if patch-has-space? best-patch [
          set current-home-patch best-patch
          set is-in-temporary-camp true
          move-to current-home-patch
          ;; étendre l’espace connu
          let nearby-patches [patches in-radius 2] of current-home-patch
          set known-space (patch-set known-space nearby-patches)
        ]
      ] [
        ;; best-patch < 6 → simple déplacement
        move-to best-patch
    ] ; Fin ifelse
  ] ;; fin Cas A
  
    
    ;; 5. Cas B : le foyer est déjà dans un campement temporaire OU transhumant
    if is-in-temporary-camp [
      ; Si le bon patch est à plus de 2 km du campement temporaire
      ifelse daily-trip >= 2 [
        ; Le foyer est transhumant
        ifelse [is-transhumant = true] of foyer-owner [
          ifelse not any? camps-on (patch-set best-patch neighbors4 best-patch) [
            
            ;; Create a temporary camp
            set current-home-patch best-patch
            move-to best-patch
            ;; Add patches within a radius of 2 cells around the camp to known-space
            let nearby-patches [patches in-radius 2] of current-home-patch
            set known-space (patch-set known-space nearby-patches)
          ] [
          move-to best-patch
        ] ; end ifelse patch-has-space
          
        ; Si le foyer N'EST PAS transhumant
      ] [
          ; Si le best patch est dans la zone connue de son propre campement
        ifelse member? best-patch original-camp-known-space [
          
          ;; Move to the best patch
          move-to best-patch
          set current-home-patch original-home-patch
          set is-in-temporary-camp false
          set xcor xcor + (random-float 0.9 - 0.45)
          set ycor ycor + (random-float 0.9 - 0.45)
          
        ] [
          ; Si le best patch N'EST PAS dans la zone connue de son propre campement
          ifelse patch-has-space? best-patch [
            
            ;; Create a temporary camp
            set current-home-patch best-patch
            set is-in-temporary-camp true
            move-to current-home-patch
            set xcor xcor + (random-float 0.9 - 0.45)
            set ycor ycor + (random-float 0.9 - 0.45)
            
            ;; Add patches within a radius of 2 cells around the camp to known-space
            let nearby-patches [patches in-radius 2] of current-home-patch
            set known-space (patch-set known-space nearby-patches)
          ] [
            move-to best-patch
            set xcor xcor + (random-float 0.9 - 0.45)
            set ycor ycor + (random-float 0.9 - 0.45)
          ] ; end ifelse patch-has-space
        ] ; end ifelse member
      ] ; end ifelse transhumant
    ] [
      ;; best-patch à < 2 patches : juste y aller
      move-to best-patch
      set xcor xcor + (random-float 0.9 - 0.45)
      set ycor ycor + (random-float 0.9 - 0.45)
    ] ;; end ifelse daily-trip >= 2
  ] ;; fin Cas B
] ;; end ifelse best-patch = nobody
  
end


;to move ; Mouvement des troupeaux - bovins puis ovins

;  move-to current-home-patch
;  set daily-trip 0
  
  ;; Find the best patch within known space
;  let best-patch find-best-nearest-patch known-space shepherd-type current-season FUtility
;  let my-known-space known-space
;  ifelse best-patch != nobody [
    ;; Calculate the distance between the best patch and the current home patch
;    set daily-trip distance best-patch
    
    ;; If the best patch is more than 6 units away from the current home patch
;    ifelse daily-trip >= 6 [

      ;; Check if the herd is not already in a temporary camp
;      ifelse not is-in-temporary-camp [

        ;; Create a temporary camp if not already in one
;        set current-home-patch best-patch
;        set is-in-temporary-camp true
;        move-to current-home-patch
;        set xcor xcor + (random-float 0.9 - 0.45)
;        set ycor ycor + (random-float 0.9 - 0.45)

        ;; Add patches within a radius of 3 cells around the camp to known-space
;        let nearby-patches [patches in-radius 2] of current-home-patch
;        set known-space (patch-set known-space nearby-patches)

;      ] [ ;; The herd is already in a temporary camp

        ;; Check if the best patch is in the original camp known space
;        ifelse member? best-patch original-camp-known-space [

          ;; Move to the best patch
;          move-to best-patch
;          set current-home-patch original-home-patch
;          set is-in-temporary-camp false
;          set xcor xcor + (random-float 0.9 - 0.45)
;          set ycor ycor + (random-float 0.9 - 0.45);

;        ] [
          ;; Create a temporary camp
;          set current-home-patch best-patch
;          set is-in-temporary-camp true
;          move-to current-home-patch
;          set xcor xcor + (random-float 0.9 - 0.45)
;          set ycor ycor + (random-float 0.9 - 0.45)

          ;; Add patches within a radius of 2 cells around the camp to known-space
;          let nearby-patches [patches in-radius 2] of current-home-patch
;          set known-space (patch-set known-space nearby-patches)
;        ]
;      ]
;    ] [ ;; The best patch is within 6 units of the current home patch

;      ;; Move to the best patch
;      move-to best-patch
;      set xcor xcor + (random-float 0.9 - 0.45)
;      set ycor ycor + (random-float 0.9 - 0.45)
;    ]
;  ] [
;    ; stratégie 1
;    let home-known-space original-camp-known-space with [is-fenced = false] 
;    move-to one-of home-known-space
;    if is-in-temporary-camp = true [
;      set current-home-patch original-home-patch
;      set is-in-temporary-camp false
 ;   ]
;  ] 

;end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Procédure de consommation du bétail ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to eat
  ; Calculer les besoins énergétiques (UF) et protéiques (MAD) qui peut évoluer à chaque step en fonction du nombre de tête dans le troupeau
  let base movement-needs daily-trip      ;; UF et MAD pour 1 UBT
  set daily-min-UF-needed-head  (item 0 base) * max-daily-DM-ingestible-per-head ; Quantité minimum d'Unité Fourragère à l'entretien d'un UBT (avec ou sans grand déplacement)
  set daily-min-MAD-needed-head (item 1 base) * max-daily-DM-ingestible-per-head ; Quantité minimum de Matière Azotée Digestible à l'entretien d'un UBT (avec ou sans grand déplacement)
  
  set daily-needs-UF daily-min-UF-needed-head * head
  set daily-needs-MAD daily-min-MAD-needed-head * head
  set daily-needs-DM max-daily-DM-ingestible-per-head * head
  set desired-DM-intake 0

  ; Déterminer la préférence pour les monocotylédones
  ifelse current-season = "Nduungu" [
    ; En Nduungu, préférence de 80% pour les monocotylédones
    set preference-mono 0.8
  ] [
    ; Pendant les autres saisons, préférence de 80% pour l'espèce avec le ratio MAD/UF le plus élevé
    let monocot-MAD-UF-ratio (([monocot-MAD-per-kg-MS] of patch-here / [monocot-UF-per-kg-MS] of patch-here) * current-monocot-grass)
    let dicot-MAD-UF-ratio (([dicot-MAD-per-kg-MS] of patch-here / [dicot-UF-per-kg-MS] of patch-here) * current-dicot-grass)

    ifelse monocot-MAD-UF-ratio >= dicot-MAD-UF-ratio [
      set preference-mono 0.8
    ] [
      set preference-mono 0.3
    ]
  ]
  ; Stratégie alimentaire 1 - Evaluation fourrage herbacé disponible
  ; Calculer l'UF/kg MS moyen du fourrage disponible
  let monocot-prop ([current-monocot-grass] of patch-here / [current-grass] of patch-here)
  let average-UF-per-kg-MS ([monocot-UF-per-kg-MS] of patch-here * monocot-prop) + ([dicot-UF-per-kg-MS] of patch-here * (1 - monocot-prop))
  let max-UF-per-kg-MS 1
  let ratio-average-UF-grass average-UF-per-kg-MS / max-UF-per-kg-MS 
  
  ; Calculer la MAD/kg MS moyenne du fourrage disponible
  let average-MAD-per-kg-MS ([monocot-MAD-per-kg-MS] of patch-here * monocot-prop) + ([dicot-MAD-per-kg-MS] of patch-here * (1 - monocot-prop))


  ; Calculer la quantité de MS à consommer en fonction de la valeur moyenne du fourrage disponible en UF. Plus la valeur est forte, plus il en mangera
    ifelse breed = cattles [ 
    set desired-DM-intake (daily-needs-DM * 0.7  + ((daily-needs-DM * 0.3)  * ratio-average-UF-grass))
  ] [
    set desired-DM-intake (daily-needs-DM * 0.5  + ((daily-needs-DM * 0.5)  * ratio-average-UF-grass))
  ; Assurer que la consommation ne dépasse pas max-daily-DM-ingestible-per-head
  set desired-DM-intake min list desired-DM-intake daily-needs-DM
  ]
  
  ; Stratégie alimentaire 2 - Evaluation fourrage total disponible (herbacée et ligneux
  ; 
  
  
  ; Consommer l'herbe
  consume-grass patch-here desired-DM-intake p preference-mono

  
  
 ; Définition du ratio maximal de ligneux consommable sur la ration totale journalière d'un UBT
  let max-tree-ratio 0.3  ;; Valeur par défaut pour bovins
 if breed = sheeps [
   set max-tree-ratio 0.5
  ]

  ; Calculer le reste de MS à consommer en fonction de la consommation journalière maximale et la quantité voulue à consommer par le troupeau
 let remaining-DM-to-consume (desired-DM-intake - DM-ingested)

  set remaining-DM-to-consume min (list remaining-DM-to-consume (desired-DM-intake * max-tree-ratio))

  if remaining-DM-to-consume > 0 [
    consume-tree-resources patch-here remaining-DM-to-consume
  ]

end


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Procédure d'ingestion de l'herbe  ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Procédure pour consommer l'herbe
to consume-grass [patch-to-eat amount-to-consume monocot-prop pref-mono]

  ; Obtenir les quantités disponibles d'herbe par type sur le patch
  let mono-grass-available [current-monocot-grass] of patch-to-eat
  let dicot-grass-available [current-dicot-grass] of patch-to-eat

  ; Calculer les quantités consommées par type sur le patch
  let mono-ingested min (list mono-grass-available (amount-to-consume * pref-mono))

  let dicot-ingested min (list dicot-grass-available (amount-to-consume * (1 - pref-mono)))
  set DM-ingested mono-ingested + dicot-ingested
  set mean-DM-ingested DM-ingested / (head) 
  ; Calculer les UF ingérées
  let mono-UF-ingested mono-ingested * [monocot-UF-per-kg-MS] of patch-to-eat
  let dicot-UF-ingested dicot-ingested * [dicot-UF-per-kg-MS] of patch-to-eat
  set UF-ingested mono-UF-ingested + dicot-UF-ingested
  ; Calculer les MAD ingérées
  let mono-MAD-ingested mono-ingested * [monocot-MAD-per-kg-MS] of patch-to-eat
  let dicot-MAD-ingested dicot-ingested * [dicot-MAD-per-kg-MS] of patch-to-eat
  set MAD-ingested mono-MAD-ingested + dicot-MAD-ingested
  ; Calculer les effets de piétinement
  let trampling-effect calculate-trampling-effect current-monocot-grass current-dicot-grass head

  ;   ; La quantité d'herbe consommée est limitée par ce qui est disponible
 ;   ask patch-to-eat [
 ;    set current-grass current-grass - (grass-ingered + trampling-effect)
;   ]
 ;  report grass-ingered  ; Retourner la quantité d'herbe consommée

  ; Réduire les stocks d'herbe sur le patch
  ask patch-to-eat [
    set current-monocot-grass current-monocot-grass - (mono-ingested + (trampling-effect * monocot-prop))
    set current-dicot-grass current-dicot-grass - (dicot-ingested + (trampling-effect * (1 - monocot-prop)))
    set current-grass current-monocot-grass + current-dicot-grass
    if current-monocot-grass < 0 [ set current-monocot-grass 0.001 ]
    if current-dicot-grass < 0 [ set current-dicot-grass 0.001 ]
    if current-grass < 0 [ set current-grass 0.002 ]
  ]
end


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Procédure d'ingestion des feuilles et fruits  ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


to consume-tree-resources [patch-of-grass-eaten remaining-needs] ;; contexte troupeau
                                                                 ;; Obtenir les populations d'arbres matures sur le patch
  let all-trees tree-populations-on patch-of-grass-eaten
  let consumption-treshold 0
  let wood-reduction-per-kg-MS 0; Cf Hiernaux 1994
                                ;; Arbres de plus de 5 ans
  set all-trees all-trees with [population-size > 0 and current-leaf-stock > 0 and current-fruit-stock > 0]
  let mature-trees all-trees with [tree-pop-age >= 6]
  let good-trees []
  ;; Déterminer les arbres ciblés en fonction du type de troupeau
  if shepherd-type = "bon" [
    set consumption-treshold 0.1
    ;; Priorité aux types "nutritive" et "fruity"
    set good-trees mature-trees with [ tree-type = "nutritive" or tree-type = "fruity" ]
    if not any? good-trees [
      ;; Si pas d'arbres "nutritive" ou "fruity", prendre les "less-nutritive"
      set consumption-treshold 0.4
      set wood-reduction-per-kg-MS 0.1
      set good-trees mature-trees
    ]
  ]
  if shepherd-type = "mauvais" [    ;; Tous les arbres, pas de distinction
    set consumption-treshold 0.6
    set wood-reduction-per-kg-MS 0.3
    set good-trees all-trees
  ]
  if any? good-trees [
    ; Créer une liste des populations consommables et leurs max-consumable
      ;; Filtrer les arbres en fonction de la disponibilité des ressources
      set good-trees good-trees with [
        (current-leaf-stock >= (consumption-treshold * max-leaf-stock)) or (current-fruit-stock >= (consumption-treshold * max-fruit-stock))
    ]  
      let tree-max-consumable []
    let total-available 0
    ask good-trees [
      if current-leaf-stock >= 0.1 and current-fruit-stock >= 0.1 [
        let max-leaves-consumable 0
        let max-fruits-consumable 0
        if leaves-status = "dispo" or leaves-status = "croissance" [
          set max-leaves-consumable min (list current-leaf-stock (max-leaf-stock * max (list leaves-percent-accessible consumption-treshold)))
        ]
        if leaves-status = "chute" or leaves-status = "au sol" [
          set max-leaves-consumable min (list current-leaf-stock max-leaf-stock)
        ]
        if fruits-status = "dispo" or fruits-status = "croissance" [
          set max-fruits-consumable min (list current-fruit-stock (max-fruit-stock * max (list fruits-percent-accessible consumption-treshold)))
        ]
        if fruits-status = "chute" [     
          set max-fruits-consumable max (list current-fruit-stock max-fruit-stock)
        ]
        if fruits-status = "au sol" [
          set max-fruits-consumable soil-current-fruit-stock 
        ]
        if fruits-UF-per-kg-MS = 0 [
          set max-fruits-consumable 0]
           
        let max_consumable (max-fruits-consumable + max-leaves-consumable)

        if max_consumable > 0 [
          set tree-max-consumable lput (list self max-fruits-consumable max-leaves-consumable) tree-max-consumable
          set total-available total-available + max_consumable
        ]
      ]
    ]
    ; Déterminer la quantité à consommer
    let amount-to-consume min list remaining-needs total-available
    if amount-to-consume <= 0 [ set amount-to-consume 0 ]

    ;; Distribuer la consommation proportionnellement dans les arbres
    foreach tree-max-consumable [ [i] ->
      let one-tree-population item 0 i
      let max-fruits-consumable item 1 i
      let max-leaves-consumable item 2 i
      
      let share_fruit (max-fruits-consumable / total-available)
      let share_leaf  (max-leaves-consumable / total-available)
      let denom share_fruit + share_leaf
      if denom > 0 [
        set share_fruit share_fruit / denom
        set share_leaf  share_leaf  / denom
      ]
      let amount-consumed-fruit (amount-to-consume * share_fruit)
      let amount-consumed-leaf (amount-to-consume * share_leaf)

      let total_available_this_tree ([max-fruits-consumable] of one-tree-population + [max-leaves-consumable] of one-tree-population)

      if total_available_this_tree > 1 [
        let leaves_share ([max-leaves-consumable] of one-tree-population / total_available_this_tree)
        let fruits_share ([max-fruits-consumable] of one-tree-population / total_available_this_tree)
        let leaves-consumed amount-consumed-leaf * leaves_share
        set leaves-eaten leaves-consumed
        let fruits-consumed amount-consumed-fruit * fruits_share * ([ratio-consumable] of one-tree-population)
        set fruits-eaten fruits-consumed

        ;; Mettre à jour les stocks dans la population d'arbres + INTEGRER LES GRAINES GERMEES
        ask one-tree-population [
          set current-leaf-stock max list (current-leaf-stock - leaves-consumed) 0
            if leaves-consumed > (max-leaf-stock * leaves-percent-accessible) [
              set current-wood-stock current-wood-stock - (wood-reduction-per-kg-MS * leaves-consumed)
            ]
          ifelse fruits-status = "au sol" [
            set soil-current-fruit-stock  max (list (soil-current-fruit-stock - fruits-consumed) 0)
          ] [
            set current-fruit-stock  max list (current-fruit-stock - fruits-consumed) 0
          ]
          set fruit-nb current-fruit-stock / one-fruit-weight
          set seed-nb fruit-nb * seed-nb-per-fruit
          set germinated-seed-nb germinated-seed-nb + (fruits-consumed * seed-nb-per-fruit / one-fruit-weight)
              if current-leaf-stock <= 0 [ set current-leaf-stock 1 ]
          if current-fruit-stock <= 0 [ set current-fruit-stock 1 ]
        ]

        ;; Calculer les UF et MAD ingérées depuis cette population
        ;; Hypothèse : les feuilles et les fruits ont les mêmes valeurs nutritives
        let UF-ingested-pop ((fruits-consumed * [fruits-UF-per-kg-MS] of one-tree-population) + (leaves-consumed * [leaves-UF-per-kg-MS] of one-tree-population))
        let MAD-ingested-pop ((fruits-consumed * [fruits-MAD-per-kg-MS] of one-tree-population) + (leaves-consumed * [leaves-MAD-per-kg-MS] of one-tree-population))

        ;; Accumuler les valeurs
        set total-UF-ingested-from-trees total-UF-ingested-from-trees + UF-ingested-pop
        set total-MAD-ingested-from-trees total-MAD-ingested-from-trees + MAD-ingested-pop
        set total-DM-ingested-from-trees total-DM-ingested-from-trees + leaves-consumed + fruits-consumed
      ] ;; end if
    ];; end foreach
     ;; context troupeau
     ;; Mettre à jour les variables du troupeau
    set UF-ingested UF-ingested + total-UF-ingested-from-trees
    set MAD-ingested MAD-ingested + total-MAD-ingested-from-trees
    set DM-ingested DM-ingested + total-DM-ingested-from-trees

    let proportion-from-trees (total-DM-ingested-from-trees / DM-ingested)   ; proportion de la ration provenant des arbres
    if shepherd-type = "mauvais" [

      if proportion-from-trees >= 0.5 [
        ;; Sélectionner un arbre au hasard parmi les arbres consommables
        if any? good-trees [
          let tree-to-kill one-of good-trees
          ask tree-to-kill [
            set current-fruit-stock current-fruit-stock - (max-fruit-stock / population-size)
            set current-leaf-stock current-leaf-stock - (max-leaf-stock / population-size)
            set current-wood-stock current-wood-stock - (max-wood-stock / population-size)
            set population-size population-size - 1  ; Supprime un arbre dans la population cible
            set trees-killed trees-killed + 1
            if current-leaf-stock <= 0 [ set current-leaf-stock 1 ]
            if current-fruit-stock <= 0 [ set current-fruit-stock 1 ]
            if current-wood-stock <= 0 [ set current-wood-stock 1]
            if population-size <= 0 [
              die
              set trees-killed trees-killed + [population-size] of self
            ]
          ]
        ]
      ]
    ]
  ]
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Mise à jour de la condition corporelle  ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Procédure pour mettre à jour la condition corporelle des animaux
to update-corporal-conditions [heads UBT total-UF-ingested total-MAD-ingested daily-need-UF daily-need-MAD max-daily-DM-ingestible-head pref-mono]
  ; Calcul de l'UFL/kg MS du fourrage consommé
  ; Nous considérons UF/kg MS ≈ UFL/kg MS pour les bovins
  ; Calcul de l'UFL/kg MS moyen du fourrage consommé
  set weight-gain 0
  let daily-needs-ratio-MAD-UF  daily-need-MAD / daily-need-UF
  let MAD-UF-ratio total-MAD-ingested / total-UF-ingested
  let max-UF-ingestible 0.90 * heads * max-daily-DM-ingestible-head
  let max-MAD-ingestible 50 * heads * max-daily-DM-ingestible-head

  ; Calculer le facteur d'énergie
  let energy-factor ((total-UF-ingested - daily-need-UF) / (max-UF-ingestible - daily-need-UF))
  ; Assurer que le facteur est entre 0 et 0.5
  let energy-factor-total max list 0 (min list energy-factor 0.5)

  ; Calculer le facteur du ratio MAD/UF
  let protein-factor ((total-MAD-ingested - daily-need-MAD) / (max-MAD-ingestible - daily-need-MAD))

  ; Assurer que le facteur est entre 0 et 0.5
  let protein-factor-total max list 0 (min list protein-factor 0.5)
  
  ; Calculer le gain de poids potentiel (en grammes par jour), en considérant qu'un UBT peut gagner jusqu'à 700g par jour et perdre autant (Boudet & Rivière, 1968 - Emploi pratique des analyses fourragères pour l'appréciation des pâturages tropicaux) (sans compter la production de lait)
  set weight-gain ((protein-factor-total + energy-factor-total) * 1.4 * UBT) - 0.7 * UBT
  
  ; Mettre à jour le poids vif à partir du gain de poids par tête de bétail
  set live-weight (live-weight + (weight-gain * head))
  if live-weight > max-live-weight [ set live-weight max-live-weight]

  ; Calculer la NEC à partir du poids vif en considérant que les vaches sont toutes des Zébus. (AMOUGOU MESSI G., 1998. Méthode d’estimation et variation de la composition corporelle des vaches zébu Gobra et Taurin N’Dama en fonction du niveau d’alimentation. Thèse de Doctorat Vétérinaire EISMV, Dakar, Sénégal, 102 p)

  if breed = cattles [
    set corporal-condition (live-weight - (148.99 * head)) / (48.6 * head)
  ]

  ; régression linéaire à partir des valeurs de https://reca-niger.org/IMG/pdf/FT_embouche_ovine_Cirdes.pdf

  if breed = sheeps [
    set corporal-condition (live-weight - (21.21 * head)) / ( 5.75 * head)
  ]

  ; Assurer que la NEC reste dans des limites raisonnables (par exemple, entre 1 et 5)
  if corporal-condition < 1 [ set corporal-condition 1 ]
  if corporal-condition > 5 [ set corporal-condition 5 ]

end


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Dégradation des arbres par piétinement ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to trample-trees
  ;; ---- CHANCE DE DÉGRADER DES JEUNES ARBRES  ---- D'abord les arbres nutritifs et fruitiers, ensuite les moins nutritifs
  let all-trees tree-populations-on patch-here
  let chance-unitaire 0.001
  let chance-troupeau (head * chance-unitaire)         ;; Valeur attendue : ex. 0.3 => 30% de chance de retirer 1 arbre
  let trees-trampled floor chance-troupeau
  let fractional (chance-troupeau - trees-trampled)

  ;; Appliquer ce retrait à la population de jeunes arbres
  let young-good-trees all-trees with [tree-pop-age < 4 and (tree-type = "nutritive" or tree-type = "fruity") and population-size > 0 ]   ;; par ex. définition "jeunes" < 4
  ifelse any? young-good-trees [
    ;; Retirer guaranteed arbres "garantis"
    ask one-of young-good-trees [
      if trees-trampled > 0 [
        set population-size max list 0 (population-size - trees-trampled)
        if population-size > 0 [
          set trees-killed trees-killed + trees-trampled
        ] ; end trees-killed
      ] ; end first supp
        ;; Test probabiliste pour éventuellement en retirer un  supplémentaire
      if random-float 1 < fractional [
        set population-size max list 0 (population-size - 1)
        if population-size > 0 [
          set trees-killed trees-killed + 1
        ]; end trees-killed
       if population-size <= 0 [
         die
        ] ; end killing tree-population with population size <= 0
      ] ; end additional supp
    ] ; end ask one-of
  ] [
    let young-trees all-trees with [tree-pop-age < 4 and population-size > 0]
    ifelse any? young-trees [
      ;; Retirer guaranteed arbres "garantis"
      ask one-of young-trees [
        if trees-trampled > 0 [
          set current-fruit-stock current-fruit-stock - (trees-trampled * (max-fruit-stock / population-size))
          set current-leaf-stock current-leaf-stock - (trees-trampled * (max-leaf-stock / population-size))
          set current-wood-stock current-wood-stock - (trees-trampled * (max-wood-stock / population-size))
          set population-size max list 0 (population-size - trees-trampled)
          if population-size > 0 [
            set trees-killed trees-killed + trees-trampled
          ] ; end trees-killed
          if population-size <= 0 [
            die
          ] ; end killing tree-population with population size <= 0
        ] ; end first supp
          ;; Test probabiliste pour éventuellement en retirer un  supplémentaire
        if random-float 1 < fractional [
          set current-fruit-stock current-fruit-stock - (max-fruit-stock / population-size)
          set current-leaf-stock current-leaf-stock - (max-leaf-stock / population-size)
          set current-wood-stock current-wood-stock - (max-wood-stock / population-size)
          set population-size max list 0 (population-size - 1)
          if population-size > 0 [
            set trees-killed trees-killed + 1
          ] ; end trees-killed
          if population-size <= 0 [
            die
          ] ; end killing tree-population with population size <= 0
        ] ; end additional supp
      ] ; end ask one-of
    ] [
      stop
    ] ; end ifelse young-trees
  ] ; end ifelse young-good-trees

end
